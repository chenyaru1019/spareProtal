<%@ WebHandler Language="C#" Class="OAOfficeHandler" %>

using System;
using System.Web;
using System.Web.Script.Serialization;
using OThinker.H3;
using System.Data;
using System.Collections.Generic;
using Newtonsoft.Json;
using System.Runtime.Serialization;
using OThinker.H3.Portal.Entity;
using OThinker.H3.Portal.service;
using System.Net.Http;

public class OAOfficeHandler : IHttpHandler {
    JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
    public void ProcessRequest (HttpContext context) {

        string command = context.Request["Command"];
        switch (command)
        {
            case "generateNo": generateNo(context); break;
            case "getCommentByFlg": getCommentByFlg(context); break;
            case "getSWQuery": getSWQuery(context); break;
            case "getFWQuery": getFWQuery(context); break;
            case "getNoBusiContractQuery": getNoBusiContractQuery(context); break;
            case "getSupplierManagerQuery": getSupplierManagerQuery(context); break;

        }
    }

    // 生成XX编号
    public void generateNo (HttpContext context) {
        string flg = context.Request["flg"];
        string No = "";
        string year = DateTime.Now.Year.ToString();
        string month = DateTime.Now.Month.ToString();
        int curyearnum = (int)Convert.ToSingle(getMaxNumOfCurYear(year,flg)) + 1;
        No = flg + year + month + string.Format("{0:000}",curyearnum);

        object JSONObj = JsonConvert.SerializeObject(No);
        context.Response.ContentType = "application/json";
        context.Response.Write(JSONObj);
    }


    // 获取收文当年累积流水号
    public string getMaxNumOfCurYear(string year,string flg)
    {
        int num = 0;
        string sql = "";
        int prelen = flg.Length + 6;
        if(flg.Equals("SW"))
        {
            sql = " SELECT Max(SWNo) No FROM I_SW where SWNo like 'SW" + year + "%' ";
        } else if (flg.Equals("FW"))
        {
            sql = " SELECT Max(FWNo) No FROM I_FW where FWNo like 'FW" + year + "%' ";
        } else if (flg.Equals("HTBS"))
        {
            sql = " SELECT Max(ApplyNo) No FROM I_NoBusiContract where ApplyNo like 'HTBS" + year + "%' ";
        }
        System.Data.DataTable dt = OThinker.H3.Controllers.AppUtility.Engine.EngineConfig.CommandFactory.CreateCommand().ExecuteDataTable(sql);
        List<Dictionary<string, string>> mList = new List<Dictionary<string, string>>();
        if (dt.Rows.Count > 0)
        {

            try
            {
                num = (int)Convert.ToSingle(dt.Rows[0]["No"].ToString().Substring(prelen));
            }
            catch (Exception exp)
            {
            }

            return num.ToString();
        } else
        {
            return num.ToString();
        }
    }

    // 获取是否有相关部门审批或总经理审批的数据
    public void getCommentByFlg (HttpContext context) {
        string flg = context.Request["flg"];
        string InstanceId = context.Request["InstanceId"];
        string ret = "";
        string sql = " select ObjectID from OT_Comment " +
        " where InstanceId = '" + InstanceId + "' " +
        " and Activity = '"+flg+"'";
        System.Data.DataTable dt = OThinker.H3.Controllers.AppUtility.Engine.EngineConfig.CommandFactory.CreateCommand().ExecuteDataTable(sql);
        if (dt.Rows.Count > 0)
        {
            ret = dt.Rows[0]["ObjectID"].ToString();
        }
        object JSONObj = JsonConvert.SerializeObject(ret);
        context.Response.ContentType = "application/json";
        context.Response.Write(JSONObj);
    }


    // 获取公司收文处理记录
    public void getSWQuery(HttpContext context)
    {
        string Title = context.Request["Title"];
        string FileType = context.Request["FileType"];
        string FromDW = context.Request["FromDW"];
        string SWDateFrom = context.Request["SWDateFrom"];
        string SWDateTo = context.Request["SWDateTo"];

        var sql = " SELECT s.Title,s.FromNo,s.FromDW,CONVERT(varchar(12),s.SWDate,111) SWDate," +
                    " ic.OriginatorName,e1.EnumValue FileTypeName,ic.State Status,ic.ObjectID IcObjectID " +
                    " FROM I_SW s " +
                    " INNER JOIN OT_InstanceContext ic on s.ObjectID = ic.BizObjectId and ic.State = '4' " +
                    " INNER JOIN OT_EnumerableMetadata e1 on s.FileType = e1.Code and e1.Category = 'OA文件类型' ";
        //var sql2 = QK_Target.Equals("")?"":" and q.QK_Target = '" + QK_Target + "'  ";
        if(!Title.Equals(""))
        {
            sql += " and s.Title like '%"+Title+"%' ";
        }
        if(!FileType.Equals(""))
        {
            sql += " and e1.EnumValue = '"+FileType+"' ";
        }
        if(!FromDW.Equals(""))
        {
            sql += " and s.FromDW like '%"+FromDW+"%' ";
        }
        if(!SWDateFrom.Equals(""))
        {
            sql += " and s.SWDate >= '"+SWDateFrom+" 00:00:00' ";
        }
        if(!SWDateTo.Equals(""))
        {
            sql += " and s.SWDate <= '"+SWDateTo+" 23:59:59' ";
        }
        sql += "  order by s.CreatedTime ";

        System.Data.DataTable dt = OThinker.H3.Controllers.AppUtility.Engine.EngineConfig.CommandFactory.CreateCommand().ExecuteDataTable(sql );
        List<Dictionary<string, string>> ls = new List<Dictionary<string, string>>();
        // 
        var TheNo = 1;
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                Dictionary<string, string> dic = new Dictionary<string, string>();
                dic.Add("TheNo", TheNo.ToString());
                dic.Add("Title", dr["Title"].ToString());
                dic.Add("FileType", dr["FileTypeName"].ToString());
                dic.Add("FromNo", dr["FromNo"].ToString());
                dic.Add("FromDW", dr["FromDW"].ToString());
                dic.Add("SWDate", dr["SWDate"].ToString());
                dic.Add("Originator", dr["OriginatorName"].ToString());
                Dictionary<string, string> workItemDic = Common.getWorkItemId(dr["IcObjectId"].ToString(), dr["Status"].ToString());
                foreach (var item in workItemDic)
                {
                    Console.WriteLine(item.Key + item.Value);
                    if (item.Key.Equals("workItemId"))
                    {
                        dic.Add("WorkItemId", item.Value);
                    }
                }
                ls.Add(dic);
                TheNo++;
            }
        }
        object JSONObj = JsonConvert.SerializeObject(ls);
        context.Response.ContentType = "application/json";
        context.Response.Write(JSONObj);
    }

    // 获取公司发文处理记录
    public void getFWQuery(HttpContext context)
    {
        string Title = context.Request["Title"];
        string FileType = context.Request["FileType"];
        string FWNo = context.Request["FWNo"];
        string FWDateFrom = context.Request["FWDateFrom"];
        string FWDateTo = context.Request["FWDateTo"];

        var sql = " SELECT s.Title,s.FWNo,CONVERT(varchar(12),s.FWDate,111) FWDate,ic.OriginatorName,e1.EnumValue FileTypeName,e2.EnumValue ImportLevelName,ic.State Status,ic.ObjectID IcObjectID " +
                    " FROM I_FW s " +
                    " INNER JOIN OT_InstanceContext ic on s.ObjectID = ic.BizObjectId and ic.State = '4' " +
                    " INNER JOIN OT_EnumerableMetadata e1 on s.FileType = e1.Code and e1.Category = 'OA文件类型' " +
                    " INNER JOIN OT_EnumerableMetadata e2 on s.ImportLevel = e2.Code and e2.Category = 'OA重要程度' ";
        //var sql2 = QK_Target.Equals("")?"":" and q.QK_Target = '" + QK_Target + "'  ";
        if(!Title.Equals(""))
        {
            sql += " and s.Title like '%"+Title+"%' ";
        }
        if(!FileType.Equals(""))
        {
            sql += " and e1.EnumValue = '"+FileType+"' ";
        }
        if(!FWNo.Equals(""))
        {
            sql += " and s.FWNo like '%"+FWNo+"%' ";
        }
        if(!FWDateFrom.Equals(""))
        {
            sql += " and s.FWDate >= '"+FWDateFrom+" 00:00:00' ";
        }
        if(!FWDateTo.Equals(""))
        {
            sql += " and s.FWDate <= '"+FWDateTo+" 23:59:59' ";
        }
        sql += "  order by s.CreatedTime ";

        System.Data.DataTable dt = OThinker.H3.Controllers.AppUtility.Engine.EngineConfig.CommandFactory.CreateCommand().ExecuteDataTable(sql );
        List<Dictionary<string, string>> ls = new List<Dictionary<string, string>>();
        // 
        var TheNo = 1;
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                Dictionary<string, string> dic = new Dictionary<string, string>();
                dic.Add("TheNo", TheNo.ToString());
                dic.Add("Title", dr["Title"].ToString());
                dic.Add("FileType", dr["FileTypeName"].ToString());
                dic.Add("FWNo", dr["FWNo"].ToString());
                dic.Add("ImportLevel", dr["ImportLevelName"].ToString());
                dic.Add("FWDate", dr["FWDate"].ToString());
                dic.Add("Originator", dr["OriginatorName"].ToString());
                Dictionary<string, string> workItemDic = Common.getWorkItemId(dr["IcObjectId"].ToString(), dr["Status"].ToString());
                foreach (var item in workItemDic)
                {
                    Console.WriteLine(item.Key + item.Value);
                    if (item.Key.Equals("workItemId"))
                    {
                        dic.Add("WorkItemId", item.Value);
                    }
                }
                ls.Add(dic);
                TheNo++;
            }
        }
        object JSONObj = JsonConvert.SerializeObject(ls);
        context.Response.ContentType = "application/json";
        context.Response.Write(JSONObj);
    }

    // 获取非业务类合同审批记录
    public void getNoBusiContractQuery(HttpContext context)
    {
        string Title = context.Request["Title"];
        string SignDW = context.Request["SignDW"];
        string TheYear = context.Request["TheYear"];
        string ApplyDateFrom = context.Request["ApplyDateFrom"];
        string ApplyDateTo = context.Request["ApplyDateTo"];

        var sql = " SELECT s.Title,s.ApplyNo,CONVERT(varchar(12),s.ApplyDate,111) ApplyDate,s.SignDW,s.TheYear,ic.OriginatorName," +
                    "  ic.State Status,ic.ObjectID IcObjectID  " +
                    " FROM I_NoBusiContract s " +
                    " INNER JOIN OT_InstanceContext ic on s.ObjectID = ic.BizObjectId and ic.State = '4' " ;
        //var sql2 = QK_Target.Equals("")?"":" and q.QK_Target = '" + QK_Target + "'  ";
        if(!Title.Equals(""))
        {
            sql += " and s.Title like '%"+Title+"%' ";
        }
        if(!SignDW.Equals(""))
        {
            sql += " and s.SignDW like '%"+SignDW+"%' ";
        }
        if(!TheYear.Equals(""))
        {
            sql += " and s.TheYear = '"+TheYear+"' ";
        }
        if(!ApplyDateFrom.Equals(""))
        {
            sql += " and s.ApplyDate >= '"+ApplyDateFrom+" 00:00:00' ";
        }
        if(!ApplyDateTo.Equals(""))
        {
            sql += " and s.ApplyDate <= '"+ApplyDateTo+" 23:59:59' ";
        }
        sql += "  order by s.CreatedTime ";

        System.Data.DataTable dt = OThinker.H3.Controllers.AppUtility.Engine.EngineConfig.CommandFactory.CreateCommand().ExecuteDataTable(sql );
        List<Dictionary<string, string>> ls = new List<Dictionary<string, string>>();
        // 
        var TheNo = 1;
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                Dictionary<string, string> dic = new Dictionary<string, string>();
                dic.Add("TheNo", TheNo.ToString());
                dic.Add("Title", dr["Title"].ToString());
                dic.Add("ApplyNo", dr["ApplyNo"].ToString());
                dic.Add("SignDW", dr["SignDW"].ToString());
                dic.Add("TheYear", dr["TheYear"].ToString());
                dic.Add("ApplyDate", dr["ApplyDate"].ToString());
                dic.Add("Originator", dr["OriginatorName"].ToString());
                Dictionary<string, string> workItemDic = Common.getWorkItemId(dr["IcObjectId"].ToString(), dr["Status"].ToString());
                foreach (var item in workItemDic)
                {
                    Console.WriteLine(item.Key + item.Value);
                    if (item.Key.Equals("workItemId"))
                    {
                        dic.Add("WorkItemId", item.Value);
                    }
                }
                ls.Add(dic);
                TheNo++;
            }
        }
        object JSONObj = JsonConvert.SerializeObject(ls);
        context.Response.ContentType = "application/json";
        context.Response.Write(JSONObj);
    }

    // 获取供应商管理记录
    public void getSupplierManagerQuery(HttpContext context)
    {
        string ManagerType = context.Request["ManagerType"];
        string SupplierName = context.Request["SupplierName"];
        string Salesman = context.Request["Salesman"];

        var sql = "  SELECT e1.EnumValue ManagerTypeName,s.SupplierName,s.SupplierNo,s.Contact,s.Telephone,s.ManagerOrg,s.Salesman," +
                    "  ic.State Status,ic.ObjectID IcObjectID  " +
                    " FROM I_SupplierManager s " +
                    " INNER JOIN OT_InstanceContext ic on s.ObjectID = ic.BizObjectId and ic.State = '4' " +
                    " INNER JOIN OT_EnumerableMetadata e1 on s.ManagerType = e1.Code and e1.Category = 'OA管理类型' " ;
        //var sql2 = QK_Target.Equals("")?"":" and q.QK_Target = '" + QK_Target + "'  ";
        if(!ManagerType.Equals(""))
        {
            sql += " and e1.EnumValue = '"+ManagerType+"' ";
        }
        if(!SupplierName.Equals(""))
        {
            sql += " and s.SupplierName like '%"+SupplierName+"%' ";
        }
        if(!Salesman.Equals(""))
        {
            sql += " and s.Salesman = '"+Salesman+"' ";
        }
        sql += "  order by s.CreatedTime ";

        System.Data.DataTable dt = OThinker.H3.Controllers.AppUtility.Engine.EngineConfig.CommandFactory.CreateCommand().ExecuteDataTable(sql );
        List<Dictionary<string, string>> ls = new List<Dictionary<string, string>>();
        // 
        var TheNo = 1;
        if (dt.Rows.Count > 0)
        {
            foreach (DataRow dr in dt.Rows)
            {
                Dictionary<string, string> dic = new Dictionary<string, string>();
                dic.Add("TheNo", TheNo.ToString());
                dic.Add("ManagerType", dr["ManagerTypeName"].ToString());
                dic.Add("SupplierName", dr["SupplierName"].ToString());
                dic.Add("SupplierNo", dr["SupplierNo"].ToString());
                dic.Add("Contact", dr["Contact"].ToString());
                dic.Add("Telephone", dr["Telephone"].ToString());
                dic.Add("ManagerOrg", dr["ManagerOrg"].ToString());
                dic.Add("Salesman", OThinker.H3.Controllers.AppUtility.Engine.Organization.GetName(dr["Salesman"].ToString()));
                Dictionary<string, string> workItemDic = Common.getWorkItemId(dr["IcObjectId"].ToString(), dr["Status"].ToString());
                foreach (var item in workItemDic)
                {
                    Console.WriteLine(item.Key + item.Value);
                    if (item.Key.Equals("workItemId"))
                    {
                        dic.Add("WorkItemId", item.Value);
                    }
                }
                ls.Add(dic);
                TheNo++;
            }
        }
        object JSONObj = JsonConvert.SerializeObject(ls);
        context.Response.ContentType = "application/json";
        context.Response.Write(JSONObj);
    }



    public bool IsReusable
    {
        get
        {
            return false;
        }
    }
    private IEngine _Engine = null;
    /// <summary>
    /// 流程引擎的接口，该接口会比this.Engine的方式更快，因为其中使用了缓存
    /// </summary>
    public IEngine Engine
    {
        get
        {
            if (OThinker.H3.Controllers.AppConfig.ConnectionMode == ConnectionStringParser.ConnectionMode.Mono)
            {
                return OThinker.H3.Controllers.AppUtility.Engine;
            }
            return _Engine;
        }
        set
        {
            _Engine = value;
        }
    }

}